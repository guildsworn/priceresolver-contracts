{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ContractKilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "DexPairAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "StablePriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "TokenPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensSalvaged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MODERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDexPairAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStableDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStablePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdminAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "moderatorAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dexPairAddress_",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialised",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "killContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "salvageTokensFromContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dexPairAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenAddress_",
          "type": "address"
        }
      ],
      "name": "setDexPairAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7ace40565099c2fcdcbbc3d7cb2dff53bd0ac4cb5a31a252db2c5dadbe99a5a6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1428840",
    "logsBloom": "0x
    "blockHash": "0xdb4f185d83f67ec93f6f4806418e3d89d47026b857b2845c47249240554d0559",
    "transactionHash": "0x7ace40565099c2fcdcbbc3d7cb2dff53bd0ac4cb5a31a252db2c5dadbe99a5a6",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x7ace40565099c2fcdcbbc3d7cb2dff53bd0ac4cb5a31a252db2c5dadbe99a5a6",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdb4f185d83f67ec93f6f4806418e3d89d47026b857b2845c47249240554d0559"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "1428840",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ae66bd39a33e3eba6c1f6e14bd3b58af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ContractKilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"DexPairAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"StablePriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"TokenPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSalvaged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MODERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDexPairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStableDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStablePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdminAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"moderatorAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dexPairAddress_\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"killContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"salvageTokensFromContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dexPairAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenAddress_\",\"type\":\"address\"}],\"name\":\"setDexPairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStablePrice()\":{\"notice\":\"Calculate how much cost 1 stable token in ELD tokens\"},\"getTokenPrice()\":{\"notice\":\"Calculate how much cost 1 ELD token in stable tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceResolverUniV2Contract.sol\":\"PriceResolverUniV2Contract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"keccak256\":\"0x13f5e15f2a0650c0b6aaee2ef19e89eaf4870d6e79662d572a393334c1397247\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xba4459ab871dfa300f5212c6c30178b63898c03533a1ede28436f11546626676\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5050943b32b6a8f282573d166b2e9d87ab7eb4dbba4ab6acf36ecb54fe6995e4\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/PriceResolverContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nabstract contract PriceResolverContract is AccessControlEnumerable {\\n\\taddress internal _tokenAddress;\\n\\taddress internal _stableAddress;\\n\\tuint256 private _tokenPrice; // How much cost 1 ELD token in stable tokens\\n\\tuint256 private _stablePrice; // How much cost 1 stable token in ELD tokens\\n\\n\\t// **************************************************\\n\\t// *************** DEFAULT_ADMIN REGION *************\\n\\t// **************************************************\\n\\tfunction salvageTokensFromContract(\\n\\t\\taddress tokenAddress_,\\n\\t\\taddress to_,\\n\\t\\tuint amount_\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\tIERC20(tokenAddress_).transfer(to_, amount_);\\n\\t\\temit TokensSalvaged(tokenAddress_, to_, amount_);\\n\\t}\\n\\n\\tfunction killContract() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n\\t\\temit ContractKilled();\\n\\t\\tselfdestruct(payable(_msgSender()));\\n\\t}\\n\\n\\t// **************************************************\\n\\t// ************** PUBLIC GETTERS REGION *************\\n\\t// **************************************************\\n\\tfunction getTokenAddress() public view returns (address) {\\n\\t\\treturn _tokenAddress;\\n\\t}\\n\\n\\tfunction getTokenDecimals() public view returns (uint8) {\\n\\t\\treturn IERC20Metadata(_tokenAddress).decimals();\\n\\t}\\n\\n\\tfunction getStableAddress() public view returns (address) {\\n\\t\\treturn _stableAddress;\\n\\t}\\n\\n\\tfunction getStableDecimals() public view returns (uint8) {\\n\\t\\treturn IERC20Metadata(_stableAddress).decimals();\\n\\t}\\n\\n\\t/// @notice Calculate how much cost 1 ELD token in stable tokens\\n\\tfunction getTokenPrice() public view virtual returns (uint256) {\\n\\t\\treturn _tokenPrice;\\n\\t}\\n\\n\\t/// @notice Calculate how much cost 1 stable token in ELD tokens\\n\\tfunction getStablePrice() public view virtual returns (uint256) {\\n\\t\\treturn _stablePrice;\\t\\n\\t}\\n\\n\\t// **************************************************\\n\\t// ****************** INTERNAL REGION ***************\\n\\t// **************************************************\\n\\tfunction _setTokenPrice(uint256 tokenPrice_) internal {\\n\\t\\temit TokenPriceUpdated(_tokenPrice, tokenPrice_);\\n\\t\\t_tokenPrice = tokenPrice_;\\n\\t}\\n\\n\\tfunction _setStablePrice(uint256 stablePrice_) internal {\\n\\t\\temit StablePriceUpdated(_stablePrice, stablePrice_);\\n\\t\\t_stablePrice = stablePrice_;\\n\\t}\\n\\n\\tfunction _setPrice(uint256 tokenPrice_, uint256 stablePrice_) internal {\\n\\t\\t_setTokenPrice(tokenPrice_);\\n\\t\\t_setStablePrice(stablePrice_);\\n\\t}\\n\\n\\t// **************************************************\\n\\t// ****************** EVENTS REGION *****************\\n\\t// **************************************************\\n\\tevent TokensSalvaged(address indexed tokenAddress, address indexed userAddress, uint amount);\\n\\tevent ContractKilled();\\n\\tevent TokenPriceUpdated(uint256 oldValue, uint256 newValue);\\n\\tevent StablePriceUpdated(uint256 oldValue, uint256 newValue);\\n}\\n\",\"keccak256\":\"0xb1b9101298843e8714b08ad562838a139f73d2a36068ee72669f416adbe5a5a1\",\"license\":\"MIT\"},\"contracts/PriceResolverUniV2Contract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"./PriceResolverContract.sol\\\";\\r\\n\\r\\ncontract PriceResolverUniV2Contract is PriceResolverContract {\\r\\n\\tbytes32 public constant MODERATOR_ROLE = keccak256(\\\"MODERATOR_ROLE\\\");\\r\\n\\r\\n\\tIUniswapV2Pair private _dexPairInstance;\\r\\n\\r\\n\\tbool private _initialised;\\r\\n\\tbool private _tokenIs0;\\r\\n\\r\\n\\t// **************************************************\\r\\n\\t// *************** DEFAULT_ADMIN REGION *************\\r\\n\\t// **************************************************\\r\\n\\tconstructor() {\\r\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\t}\\r\\n\\r\\n\\tfunction init(\\r\\n\\t\\taddress defaultAdminAddress_,\\r\\n\\t\\taddress moderatorAddress_,\\r\\n\\t\\taddress tokenAddress_,\\r\\n\\t\\taddress dexPairAddress_\\r\\n\\t) public onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n\\t\\trequire(!_initialised, \\\"Contract is already initialised!\\\");\\r\\n\\r\\n\\t\\t_grantRole(DEFAULT_ADMIN_ROLE, defaultAdminAddress_);\\r\\n\\t\\t_grantRole(MODERATOR_ROLE, moderatorAddress_);\\r\\n\\r\\n\\t\\t_setDexPairAddress(dexPairAddress_, tokenAddress_);\\r\\n\\r\\n\\t\\t_initialised = true;\\r\\n\\t\\t_revokeRole(DEFAULT_ADMIN_ROLE, _msgSender());\\r\\n\\t}\\r\\n\\r\\n\\t// **************************************************\\r\\n\\t// ***************** MODERATOR REGION ***************\\r\\n\\t// **************************************************\\r\\n\\tfunction setDexPairAddress(\\r\\n\\t\\taddress dexPairAddress_,\\r\\n\\t\\taddress tokenAddress_\\r\\n\\t) public onlyRole(MODERATOR_ROLE) {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\taddress(_dexPairInstance) != dexPairAddress_,\\r\\n\\t\\t\\t\\\"Value is already set!\\\"\\r\\n\\t\\t);\\r\\n\\t\\temit DexPairAddressChanged(address(_dexPairInstance), dexPairAddress_);\\r\\n\\t\\t_setDexPairAddress(dexPairAddress_, tokenAddress_);\\r\\n\\t}\\r\\n\\r\\n\\t// **************************************************\\r\\n\\t// ************** PUBLIC GETTERS REGION *************\\r\\n\\t// **************************************************\\t\\r\\n\\tfunction getDexPairAddress() public view returns (address) {\\r\\n\\t\\treturn address(_dexPairInstance);\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Calculate how much cost 1 ELD token in stable tokens\\r\\n\\tfunction getTokenPrice() public override view returns (uint) {\\r\\n\\t\\t//TODO: SECURITY Flash loans, take total deposit in calculation\\r\\n\\t\\t(uint Res0, uint Res1, ) = _dexPairInstance.getReserves();\\r\\n\\t\\tuint oneToken = 1 * 10 ** getTokenDecimals();\\r\\n\\t\\tif (_tokenIs0) {\\r\\n\\t\\t\\treturn ((uint256(Res1) * oneToken) / uint256(Res0));\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn ((uint256(Res0) * oneToken) / uint256(Res1));\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Calculate how much cost 1 stable token in ELD tokens\\r\\n\\tfunction getStablePrice() public override view returns (uint) {\\r\\n\\t\\t//TODO: SECURITY Flash loans, take total deposit in calculation\\r\\n\\t\\t(uint112 Res0, uint112 Res1, ) = _dexPairInstance.getReserves();\\r\\n\\t\\tuint oneToken = 1 * 10 ** getStableDecimals();\\r\\n\\t\\tif (_tokenIs0) {\\r\\n\\t\\t\\treturn ((uint256(Res0) * oneToken) / uint256(Res1));\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn ((uint256(Res1) * oneToken) / uint256(Res0));\\r\\n\\t\\t}\\t\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction isInitialised() public view returns (bool) {\\r\\n\\t\\treturn _initialised;\\r\\n\\t}\\r\\n\\r\\n\\t// **************************************************\\r\\n\\t// ****************** INTERNAL REGION ***************\\r\\n\\t// **************************************************\\r\\n\\tfunction _setDexPairAddress(\\r\\n\\t\\taddress dexPairAddress_,\\r\\n\\t\\taddress tokenAddress_\\r\\n\\t) internal {\\r\\n\\t\\t_dexPairInstance = IUniswapV2Pair(dexPairAddress_);\\r\\n\\t\\t_tokenAddress = tokenAddress_;\\r\\n\\t\\tif (_dexPairInstance.token0() == tokenAddress_) {\\r\\n\\t\\t\\t_stableAddress = _dexPairInstance.token1();\\r\\n\\t\\t\\t_tokenIs0 = true;\\r\\n\\t\\t} else if (_dexPairInstance.token1() == tokenAddress_) {\\r\\n\\t\\t\\t_stableAddress = _dexPairInstance.token0();\\r\\n\\t\\t\\t_tokenIs0 = false;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trevert(\\\"TokenAddress in not in pair!\\\");\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// **************************************************\\r\\n\\t// ****************** EVENTS REGION *****************\\r\\n\\t// **************************************************\\r\\n\\tevent DexPairAddressChanged(address oldValue, address newValue);\\r\\n}\\r\\n\",\"keccak256\":\"0xba2bd6885bf56bed2869cae0f9582f451f31eda5621b201186b13bcf2215c3e1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001f60003362000025565b6200017b565b6200003c82826200006860201b620009ec1760201c565b60008281526001602090815260409091206200006391839062000a7062000109821b17901c565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000105576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000c43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600062000120836001600160a01b03841662000129565b90505b92915050565b6000818152600183016020526040812054620001725750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000123565b50600062000123565b611723806200018b6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80639010d07c116100b8578063a217fddf1161007c578063a217fddf146102b7578063ca15c873146102bf578063d547741f146102d2578063ec9e0393146102e5578063f5815144146102ed578063fb584b23146102fe57600080fd5b80639010d07c1461025957806391d148541461026c5780639b27d9b21461027f5780639ed3c90c14610292578063a0929cda146102a457600080fd5b806324f65ee71161010a57806324f65ee7146101e25780632f2ff15d146101fc57806336568abe1461020f5780634b94f50e14610222578063797669c91461022a5780637a5b5a1d1461025157600080fd5b806301ffc9a71461014757806306552ff31461016f57806310fe9ae8146101845780631c02708d146101a9578063248a9ca3146101b1575b600080fd5b61015a610155366004611200565b61030f565b60405190151581526020015b60405180910390f35b61018261017d36600461123f565b61033a565b005b6002546001600160a01b03165b6040516001600160a01b039091168152602001610166565b61018261040e565b6101d46101bf36600461129b565b60009081526020819052604090206001015490565b604051908152602001610166565b6101ea610445565b60405160ff9091168152602001610166565b61018261020a3660046112b4565b6104c7565b61018261021d3660046112b4565b6104f1565b6101d461056f565b6101d47f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f81565b6101ea61066e565b6101916102673660046112e4565b6106b3565b61015a61027a3660046112b4565b6106d2565b61018261028d366004611306565b6106fb565b600654600160a01b900460ff1661015a565b6101826102b2366004611334565b6107cc565b6101d4600081565b6101d46102cd36600461129b565b6108ad565b6101826102e03660046112b4565b6108c4565b6101d46108e9565b6003546001600160a01b0316610191565b6006546001600160a01b0316610191565b60006001600160e01b03198216635a05180f60e01b1480610334575061033482610a85565b92915050565b600061034581610aba565b600654600160a01b900460ff16156103a45760405162461bcd60e51b815260206004820181905260248201527f436f6e747261637420697320616c726561647920696e697469616c697365642160448201526064015b60405180910390fd5b6103af600086610ac7565b6103d97f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f85610ac7565b6103e38284610ae9565b6006805460ff60a01b1916600160a01b17905561040760006104023390565b610de2565b5050505050565b600061041981610aba565b6040517f57ba5b229dec138f5bae2e9a20b8035310ff14ea10b05bdbfa410625f867c79190600090a133ff5b6002546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561048a57600080fd5b505afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190611375565b905090565b6000828152602081905260409020600101546104e281610aba565b6104ec8383610ac7565b505050565b6001600160a01b03811633146105615760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161039b565b61056b8282610de2565b5050565b6000806000600660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa91906113b4565b506001600160701b031691506001600160701b03169150600061061b610445565b61062690600a6114fe565b61063190600161150d565b600654909150600160a81b900460ff16156106635782610651828461150d565b61065b919061152c565b935050505090565b81610651828561150d565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561048a57600080fd5b60008281526001602052604081206106cb9083610e04565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f61072581610aba565b6006546001600160a01b038481169116141561077b5760405162461bcd60e51b815260206004820152601560248201527456616c756520697320616c7265616479207365742160581b604482015260640161039b565b600654604080516001600160a01b03928316815291851660208301527f2de6f4d4f681869e9a1b66ba6554751fc4d69ea8c2b7556433c2362b000791e8910160405180910390a16104ec8383610ae9565b60006107d781610aba565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb90604401602060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610859919061154e565b50826001600160a01b0316846001600160a01b03167fc00a88ee4656f9bf9caef53a29be902b0017cf1e454eaed6526c08b8c2e106cf8460405161089f91815260200190565b60405180910390a350505050565b600081815260016020526040812061033490610e10565b6000828152602081905260409020600101546108df81610aba565b6104ec8383610de2565b6000806000600660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561093c57600080fd5b505afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097491906113b4565b5091509150600061098361066e565b61098e90600a6114fe565b61099990600161150d565b600654909150600160a81b900460ff16156109cd57816001600160701b031681846001600160701b0316610651919061150d565b826001600160701b031681836001600160701b0316610651919061150d565b6109f682826106d2565b61056b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a2c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106cb836001600160a01b038416610e1a565b60006001600160e01b03198216637965db0b60e01b148061033457506301ffc9a760e01b6001600160e01b0319831614610334565b610ac48133610e69565b50565b610ad182826109ec565b60008281526001602052604090206104ec9082610a70565b600680546001600160a01b03199081166001600160a01b038581169182179093556002805490921692841692831790915560408051630dfe168160e01b81529051630dfe168191600481810192602092909190829003018186803b158015610b5057600080fd5b505afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190611570565b6001600160a01b03161415610c5657600660009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190611570565b600380546001600160a01b03929092166001600160a01b03199092169190911790556006805460ff60a81b1916600160a81b1790555050565b6006546040805163d21220a760e01b815290516001600160a01b0380851693169163d21220a7916004808301926020929190829003018186803b158015610c9c57600080fd5b505afa158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190611570565b6001600160a01b03161415610d9a57600660009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190611570565b600380546001600160a01b0319166001600160a01b039290921691909117905550506006805460ff60a81b19169055565b60405162461bcd60e51b815260206004820152601c60248201527f546f6b656e4164647265737320696e206e6f7420696e20706169722100000000604482015260640161039b565b610dec8282610ecd565b60008281526001602052604090206104ec9082610f32565b60006106cb8383610f47565b6000610334825490565b6000818152600183016020526040812054610e6157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610334565b506000610334565b610e7382826106d2565b61056b57610e8b816001600160a01b03166014610f71565b610e96836020610f71565b604051602001610ea79291906115bd565b60408051601f198184030181529082905262461bcd60e51b825261039b91600401611632565b610ed782826106d2565b1561056b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106cb836001600160a01b03841661110d565b6000826000018281548110610f5e57610f5e611665565b9060005260206000200154905092915050565b60606000610f8083600261150d565b610f8b90600261167b565b67ffffffffffffffff811115610fa357610fa3611693565b6040519080825280601f01601f191660200182016040528015610fcd576020820181803683370190505b509050600360fc1b81600081518110610fe857610fe8611665565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061101757611017611665565b60200101906001600160f81b031916908160001a905350600061103b84600261150d565b61104690600161167b565b90505b60018111156110be576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061107a5761107a611665565b1a60f81b82828151811061109057611090611665565b60200101906001600160f81b031916908160001a90535060049490941c936110b7816116a9565b9050611049565b5083156106cb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161039b565b600081815260018301602052604081205480156111f65760006111316001836116c0565b8554909150600090611145906001906116c0565b90508181146111aa57600086600001828154811061116557611165611665565b906000526020600020015490508087600001848154811061118857611188611665565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806111bb576111bb6116d7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610334565b6000915050610334565b60006020828403121561121257600080fd5b81356001600160e01b0319811681146106cb57600080fd5b6001600160a01b0381168114610ac457600080fd5b6000806000806080858703121561125557600080fd5b84356112608161122a565b935060208501356112708161122a565b925060408501356112808161122a565b915060608501356112908161122a565b939692955090935050565b6000602082840312156112ad57600080fd5b5035919050565b600080604083850312156112c757600080fd5b8235915060208301356112d98161122a565b809150509250929050565b600080604083850312156112f757600080fd5b50508035926020909101359150565b6000806040838503121561131957600080fd5b82356113248161122a565b915060208301356112d98161122a565b60008060006060848603121561134957600080fd5b83356113548161122a565b925060208401356113648161122a565b929592945050506040919091013590565b60006020828403121561138757600080fd5b815160ff811681146106cb57600080fd5b80516001600160701b03811681146113af57600080fd5b919050565b6000806000606084860312156113c957600080fd5b6113d284611398565b92506113e060208501611398565b9150604084015163ffffffff811681146113f957600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561145557816000190482111561143b5761143b611404565b8085161561144857918102915b93841c939080029061141f565b509250929050565b60008261146c57506001610334565b8161147957506000610334565b816001811461148f5760028114611499576114b5565b6001915050610334565b60ff8411156114aa576114aa611404565b50506001821b610334565b5060208310610133831016604e8410600b84101617156114d8575081810a610334565b6114e2838361141a565b80600019048211156114f6576114f6611404565b029392505050565b60006106cb60ff84168361145d565b600081600019048311821515161561152757611527611404565b500290565b60008261154957634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561156057600080fd5b815180151581146106cb57600080fd5b60006020828403121561158257600080fd5b81516106cb8161122a565b60005b838110156115a8578181015183820152602001611590565b838111156115b7576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516115f581601785016020880161158d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161162681602884016020880161158d565b01602801949350505050565b602081526000825180602084015261165181604085016020870161158d565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b6000821982111561168e5761168e611404565b500190565b634e487b7160e01b600052604160045260246000fd5b6000816116b8576116b8611404565b506000190190565b6000828210156116d2576116d2611404565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122055ab363687204ee3c8f1bfe358b543e32e8f6710178ccdda7860b0a97e15076364736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80639010d07c116100b8578063a217fddf1161007c578063a217fddf146102b7578063ca15c873146102bf578063d547741f146102d2578063ec9e0393146102e5578063f5815144146102ed578063fb584b23146102fe57600080fd5b80639010d07c1461025957806391d148541461026c5780639b27d9b21461027f5780639ed3c90c14610292578063a0929cda146102a457600080fd5b806324f65ee71161010a57806324f65ee7146101e25780632f2ff15d146101fc57806336568abe1461020f5780634b94f50e14610222578063797669c91461022a5780637a5b5a1d1461025157600080fd5b806301ffc9a71461014757806306552ff31461016f57806310fe9ae8146101845780631c02708d146101a9578063248a9ca3146101b1575b600080fd5b61015a610155366004611200565b61030f565b60405190151581526020015b60405180910390f35b61018261017d36600461123f565b61033a565b005b6002546001600160a01b03165b6040516001600160a01b039091168152602001610166565b61018261040e565b6101d46101bf36600461129b565b60009081526020819052604090206001015490565b604051908152602001610166565b6101ea610445565b60405160ff9091168152602001610166565b61018261020a3660046112b4565b6104c7565b61018261021d3660046112b4565b6104f1565b6101d461056f565b6101d47f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f81565b6101ea61066e565b6101916102673660046112e4565b6106b3565b61015a61027a3660046112b4565b6106d2565b61018261028d366004611306565b6106fb565b600654600160a01b900460ff1661015a565b6101826102b2366004611334565b6107cc565b6101d4600081565b6101d46102cd36600461129b565b6108ad565b6101826102e03660046112b4565b6108c4565b6101d46108e9565b6003546001600160a01b0316610191565b6006546001600160a01b0316610191565b60006001600160e01b03198216635a05180f60e01b1480610334575061033482610a85565b92915050565b600061034581610aba565b600654600160a01b900460ff16156103a45760405162461bcd60e51b815260206004820181905260248201527f436f6e747261637420697320616c726561647920696e697469616c697365642160448201526064015b60405180910390fd5b6103af600086610ac7565b6103d97f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f85610ac7565b6103e38284610ae9565b6006805460ff60a01b1916600160a01b17905561040760006104023390565b610de2565b5050505050565b600061041981610aba565b6040517f57ba5b229dec138f5bae2e9a20b8035310ff14ea10b05bdbfa410625f867c79190600090a133ff5b6002546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561048a57600080fd5b505afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190611375565b905090565b6000828152602081905260409020600101546104e281610aba565b6104ec8383610ac7565b505050565b6001600160a01b03811633146105615760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161039b565b61056b8282610de2565b5050565b6000806000600660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156105c257600080fd5b505afa1580156105d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fa91906113b4565b506001600160701b031691506001600160701b03169150600061061b610445565b61062690600a6114fe565b61063190600161150d565b600654909150600160a81b900460ff16156106635782610651828461150d565b61065b919061152c565b935050505090565b81610651828561150d565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561048a57600080fd5b60008281526001602052604081206106cb9083610e04565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b7f71f3d55856e4058ed06ee057d79ada615f65cdf5f9ee88181b914225088f834f61072581610aba565b6006546001600160a01b038481169116141561077b5760405162461bcd60e51b815260206004820152601560248201527456616c756520697320616c7265616479207365742160581b604482015260640161039b565b600654604080516001600160a01b03928316815291851660208301527f2de6f4d4f681869e9a1b66ba6554751fc4d69ea8c2b7556433c2362b000791e8910160405180910390a16104ec8383610ae9565b60006107d781610aba565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820184905285169063a9059cbb90604401602060405180830381600087803b15801561082157600080fd5b505af1158015610835573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610859919061154e565b50826001600160a01b0316846001600160a01b03167fc00a88ee4656f9bf9caef53a29be902b0017cf1e454eaed6526c08b8c2e106cf8460405161089f91815260200190565b60405180910390a350505050565b600081815260016020526040812061033490610e10565b6000828152602081905260409020600101546108df81610aba565b6104ec8383610de2565b6000806000600660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561093c57600080fd5b505afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097491906113b4565b5091509150600061098361066e565b61098e90600a6114fe565b61099990600161150d565b600654909150600160a81b900460ff16156109cd57816001600160701b031681846001600160701b0316610651919061150d565b826001600160701b031681836001600160701b0316610651919061150d565b6109f682826106d2565b61056b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610a2c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006106cb836001600160a01b038416610e1a565b60006001600160e01b03198216637965db0b60e01b148061033457506301ffc9a760e01b6001600160e01b0319831614610334565b610ac48133610e69565b50565b610ad182826109ec565b60008281526001602052604090206104ec9082610a70565b600680546001600160a01b03199081166001600160a01b038581169182179093556002805490921692841692831790915560408051630dfe168160e01b81529051630dfe168191600481810192602092909190829003018186803b158015610b5057600080fd5b505afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190611570565b6001600160a01b03161415610c5657600660009054906101000a90046001600160a01b03166001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015610be557600080fd5b505afa158015610bf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1d9190611570565b600380546001600160a01b03929092166001600160a01b03199092169190911790556006805460ff60a81b1916600160a81b1790555050565b6006546040805163d21220a760e01b815290516001600160a01b0380851693169163d21220a7916004808301926020929190829003018186803b158015610c9c57600080fd5b505afa158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd49190611570565b6001600160a01b03161415610d9a57600660009054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d699190611570565b600380546001600160a01b0319166001600160a01b039290921691909117905550506006805460ff60a81b19169055565b60405162461bcd60e51b815260206004820152601c60248201527f546f6b656e4164647265737320696e206e6f7420696e20706169722100000000604482015260640161039b565b610dec8282610ecd565b60008281526001602052604090206104ec9082610f32565b60006106cb8383610f47565b6000610334825490565b6000818152600183016020526040812054610e6157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610334565b506000610334565b610e7382826106d2565b61056b57610e8b816001600160a01b03166014610f71565b610e96836020610f71565b604051602001610ea79291906115bd565b60408051601f198184030181529082905262461bcd60e51b825261039b91600401611632565b610ed782826106d2565b1561056b576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006106cb836001600160a01b03841661110d565b6000826000018281548110610f5e57610f5e611665565b9060005260206000200154905092915050565b60606000610f8083600261150d565b610f8b90600261167b565b67ffffffffffffffff811115610fa357610fa3611693565b6040519080825280601f01601f191660200182016040528015610fcd576020820181803683370190505b509050600360fc1b81600081518110610fe857610fe8611665565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061101757611017611665565b60200101906001600160f81b031916908160001a905350600061103b84600261150d565b61104690600161167b565b90505b60018111156110be576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061107a5761107a611665565b1a60f81b82828151811061109057611090611665565b60200101906001600160f81b031916908160001a90535060049490941c936110b7816116a9565b9050611049565b5083156106cb5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161039b565b600081815260018301602052604081205480156111f65760006111316001836116c0565b8554909150600090611145906001906116c0565b90508181146111aa57600086600001828154811061116557611165611665565b906000526020600020015490508087600001848154811061118857611188611665565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806111bb576111bb6116d7565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610334565b6000915050610334565b60006020828403121561121257600080fd5b81356001600160e01b0319811681146106cb57600080fd5b6001600160a01b0381168114610ac457600080fd5b6000806000806080858703121561125557600080fd5b84356112608161122a565b935060208501356112708161122a565b925060408501356112808161122a565b915060608501356112908161122a565b939692955090935050565b6000602082840312156112ad57600080fd5b5035919050565b600080604083850312156112c757600080fd5b8235915060208301356112d98161122a565b809150509250929050565b600080604083850312156112f757600080fd5b50508035926020909101359150565b6000806040838503121561131957600080fd5b82356113248161122a565b915060208301356112d98161122a565b60008060006060848603121561134957600080fd5b83356113548161122a565b925060208401356113648161122a565b929592945050506040919091013590565b60006020828403121561138757600080fd5b815160ff811681146106cb57600080fd5b80516001600160701b03811681146113af57600080fd5b919050565b6000806000606084860312156113c957600080fd5b6113d284611398565b92506113e060208501611398565b9150604084015163ffffffff811681146113f957600080fd5b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561145557816000190482111561143b5761143b611404565b8085161561144857918102915b93841c939080029061141f565b509250929050565b60008261146c57506001610334565b8161147957506000610334565b816001811461148f5760028114611499576114b5565b6001915050610334565b60ff8411156114aa576114aa611404565b50506001821b610334565b5060208310610133831016604e8410600b84101617156114d8575081810a610334565b6114e2838361141a565b80600019048211156114f6576114f6611404565b029392505050565b60006106cb60ff84168361145d565b600081600019048311821515161561152757611527611404565b500290565b60008261154957634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561156057600080fd5b815180151581146106cb57600080fd5b60006020828403121561158257600080fd5b81516106cb8161122a565b60005b838110156115a8578181015183820152602001611590565b838111156115b7576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516115f581601785016020880161158d565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161162681602884016020880161158d565b01602801949350505050565b602081526000825180602084015261165181604085016020870161158d565b601f01601f19169190910160400192915050565b634e487b7160e01b600052603260045260246000fd5b6000821982111561168e5761168e611404565b500190565b634e487b7160e01b600052604160045260246000fd5b6000816116b8576116b8611404565b506000190190565b6000828210156116d2576116d2611404565b500390565b634e487b7160e01b600052603160045260246000fdfea264697066735822122055ab363687204ee3c8f1bfe358b543e32e8f6710178ccdda7860b0a97e15076364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStablePrice()": {
        "notice": "Calculate how much cost 1 stable token in ELD tokens"
      },
      "getTokenPrice()": {
        "notice": "Calculate how much cost 1 ELD token in stable tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 338,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)1241_storage)"
      },
      {
        "astId": 1778,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_tokenAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1780,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_stableAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1782,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_tokenPrice",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1784,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_stablePrice",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2092,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_dexPairInstance",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IUniswapV2Pair)1770"
      },
      {
        "astId": 2094,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_initialised",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2096,
        "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
        "label": "_tokenIs0",
        "offset": 21,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IUniswapV2Pair)1770": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)1241_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)1241_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1241_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1240,
            "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)940_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)940_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 935,
            "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 939,
            "contract": "contracts/PriceResolverUniV2Contract.sol:PriceResolverUniV2Contract",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}